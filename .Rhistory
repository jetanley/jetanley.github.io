rmarkdown::render("2022-06-06-Second-Blog-Post.Rmd", output_format = "github_document", output_dir = "_rmd", output_options = list(html_preview = false))
rmarkdown::render("_Rmd/2022-06-06-Second-Blog-Post.Rmd", output_format = "github_document", output_dir = "_rmd", output_options = list(html_preview = false))
install.packages("knitr")
install.packages("knitr")
rmarkdown::render("_Rmd/2022-06-06-Second-Blog-Post.Rmd", output_format = "github_document", output_dir = "_rmd", output_options = list(html_preview = false))
rmarkdown::render("_Rmd/2022-06-06-Second-Blog-Post.Rmd", output_format = "github_document", output_dir = "_rmd", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-06-06-Second-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-06-06-Second-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-06-06-Second-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-06-06-Second-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-06-06-Second-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-06-23-Third-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-06-23-Third-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
library(ggplot2)
theme_set(theme_classic())
# Plot
g <- ggplot(mpg, aes(class, cty))
g + geom_boxplot(varwidth=T, fill="plum") +
labs(title="Box plot",
subtitle="City Mileage grouped by Class of vehicle",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
View(USArrests)
library(tibble)
df <- tibble::rownames_to_column(USArrests, "State")
View(df)
# The initial dataset has state as row names. need to change this
library(tibble)
df <- tibble::rownames_to_column(USArrests, "State")
# set theme and load ggplot2 package
library(ggplot2)
theme_set(theme_classic())
# Plot
ggplot(df, aes(x=State, y=Murder)) +
geom_point(size=3) +
geom_segment(aes(x=State,
xend=State,
y=0,
yend=Murder)) +
labs(title="Lollipop Chart",
subtitle="State Vs Murder")  +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
# The initial dataset has state as row names. need to change this
library(tibble)
df <- tibble::rownames_to_column(USArrests, "State")
# set theme and load ggplot2 package
library(ggplot2)
theme_set(theme_classic())
# Plot
ggplot(df, aes(x=State, y=Murder)) +
geom_point(size=3) +
geom_segment(aes(x=State,
xend=State,
y=0,
yend=Murder)) +
labs(title="Lollipop Chart",
subtitle="State Vs Murder", y = "Murder arrests (per 100,000)")  +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
rmarkdown::render("_Rmd/2022-06-29-Real-Third-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-06-29-Real-Third-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-06-29-Real-Third-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-06-29-Real-Third-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
getwd()
rmarkdown::render("_Rmd/2022-07-10-project-2-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-07-10-project-2-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(caret)
library(dplyr)
# read in data
heart <- read_csv("heart.csv")
# Create a new variable that is a factor version of the HeartDisease variable
heart$HeartDisease <- as.factor(heart$HeartDisease)
# Remove the ST_Slope variable
heart <- subset(heart, select = -c(ST_Slope))
# To use kNN we generally want to have all numeric predictors. Create dummy columns corresponding to the values of these three variables for use in our kNN fit
# use dummyVars() and predict() to create new columns. Then add these columns to our data frame and remove the original columns from which these variables were created.
dummies <- dummyVars(~ Sex + ChestPainType + RestingECG + ExerciseAngina, data = heart)
dumvars <- data.frame(predict(dummies, newdata = heart))
hearts <- cbind(heart, dumvars)
hearts <- select(hearts, -c(Sex, ChestPainType, RestingECG, ExerciseAngina))
set.seed(123)
# Split the data into a training and test set (p = .8)
# indices
train <- sample(1:nrow(hearts), size = nrow(hearts)*.8)
test <- setdiff(1:nrow(hearts), train)
# trainiing and testing subsets
heartTrain <- hearts[train, ]
heartsTest <- hearts[test, ]
# repeated 10 fold cross-validation, with the number of repeats being 3. preprocess the data by centering and scaling. set the tuneGrid so that you are considering values of k of 1, 2, 3, . . . , 40
knnfit <- train(HeartDisease ~ ., data = heartTrain, method = "knn", preProcess = c("center", "scale"),
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 3),
tuneGrid = expand.grid(k = c(1:40)))
knnfit
confusionMatrix(data = heartsTest$HeartDisease, reference = predict(knnfit, newdata = heartsTest))
plot(knnfit)
knitr::opts_chunk$set(echo = TRUE)
# read in data
heart <- read_csv("heart.csv")
library(readr)
library(caret)
library(dplyr)
# read in data
heart <- read_csv("heart.csv")
# read in data
heart <- read_csv("../ST558/heart.csv")
# Create a new variable that is a factor version of the HeartDisease variable
heart$HeartDisease <- as.factor(heart$HeartDisease)
# Remove the ST_Slope variable
heart <- subset(heart, select = -c(ST_Slope))
# To use kNN we generally want to have all numeric predictors. Create dummy columns corresponding to the values of these three variables for use in our kNN fit
# use dummyVars() and predict() to create new columns. Then add these columns to our data frame and remove the original columns from which these variables were created.
dummies <- dummyVars(~ Sex + ChestPainType + RestingECG + ExerciseAngina, data = heart)
dumvars <- data.frame(predict(dummies, newdata = heart))
hearts <- cbind(heart, dumvars)
hearts <- select(hearts, -c(Sex, ChestPainType, RestingECG, ExerciseAngina))
set.seed(123)
# Split the data into a training and test set (p = .8)
# indices
train <- sample(1:nrow(hearts), size = nrow(hearts)*.8)
test <- setdiff(1:nrow(hearts), train)
# trainiing and testing subsets
heartTrain <- hearts[train, ]
heartsTest <- hearts[test, ]
# repeated 10 fold cross-validation, with the number of repeats being 3. preprocess the data by centering and scaling. set the tuneGrid so that you are considering values of k of 1, 2, 3, . . . , 40
knnfit <- train(HeartDisease ~ ., data = heartTrain, method = "knn", preProcess = c("center", "scale"),
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 3),
tuneGrid = expand.grid(k = c(1:40)))
# visualize the different
plot(knnfit)
# Check how well your model does on the test set using the confusionMatrix() function
confusionMatrix(data = heartsTest$HeartDisease, reference = predict(knnfit, newdata = heartsTest))
rmarkdown::render("_Rmd/2022-07-14-Fourth-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-07-14-Fourth-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-07-14-Fourth-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-07-14-Fourth-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-07-14-Fourth-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
rmarkdown::render("_Rmd/2022-07-14-Fourth-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
# read in data
heart <- read_csv("../../ST558/heart.csv")
# Create a new variable that is a factor version of the HeartDisease variable
heart$HeartDisease <- as.factor(heart$HeartDisease)
# Remove the ST_Slope variable
heart <- subset(heart, select = -c(ST_Slope))
# To use kNN we generally want to have all numeric predictors. Create dummy columns corresponding to the values of these three variables for use in our kNN fit
# use dummyVars() and predict() to create new columns. Then add these columns to our data frame and remove the original columns from which these variables were created.
dummies <- dummyVars(~ Sex + ChestPainType + RestingECG + ExerciseAngina, data = heart)
dumvars <- data.frame(predict(dummies, newdata = heart))
hearts <- cbind(heart, dumvars)
hearts <- select(hearts, -c(Sex, ChestPainType, RestingECG, ExerciseAngina))
set.seed(123)
# Split the data into a training and test set (p = .8)
# indices
train <- sample(1:nrow(hearts), size = nrow(hearts)*.8)
test <- setdiff(1:nrow(hearts), train)
# trainiing and testing subsets
heartTrain <- hearts[train, ]
heartsTest <- hearts[test, ]
rmarkdown::render("_Rmd/2022-07-14-Fourth-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
heart <- read_csv("../../ST558/heart.csv")
rmarkdown::render("_Rmd/2022-07-14-Fourth-Blog-Post.Rmd", output_format = "github_document", output_dir = "_posts", output_options = list(html_preview = FALSE))
